# Cache spec
# - cargo-cache-1
#    - contents: .cargo
#    - based on: Cargo.toml
# - cargo-cache-2
#    - contents: .cargo
#    - based on: Cargo.lock

version: 2
jobs:
  build:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
        environment:
          CARGO_HOME: /home/circleci/.cargo
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
            - cargo-cache-2-{{ checksum "Cargo.lock" }}
            - cargo-cache-2-
      - run:
          name: Reduce codegen units
          # If we don't include this, the linker runs out of memory when building
          # the project on CI. We don't include this normally though because
          # it should be able to build with more units on other machines
          command: printf "[profile.dev]\ncodegen-units = 1\n" >> Cargo.toml
      - run:
          name: Build
          command: cargo build --all-features --all-targets
      - run:
          name: Test
          # Note the timeout is included to make sure that they
          # do not run for more than 10 minutes under any circumstances
          # (We have had issues with bugs causing the tests to "run"
          # for 5 hours, wasting a ton of compute credits)
          command: timeout 10m cargo test --all --all-features
          environment:
            RUST_BACKTRACE: "1"
      - run:
          name: Check Style
          command: |
            cargo fmt --all -- --check
            cargo clippy --all-targets --all-features -- -D warnings
      - run:
          name: Audit Dependencies
          command: cargo audit
      # - run:
      #     name: Install kcov
      #     command: >-
      #       kcov --version ||
      #       (sudo apt-get install cmake g++ pkg-config jq libcurl4-openssl-dev libelf-dev libdw-dev binutils-dev libiberty-dev
      #       && cargo kcov --print-install-kcov-sh | sh)
      # - run:
      #     name: Generate Coverage Report
      #     # Enable sudo to avoid the error: "Can't set personality: Operation not permitted"
      #     # See discussion in https://github.com/travis-ci/travis-ci/issues/9061
      #     sudo: required
      #     command:
      #       cargo kcov --all --verbose
      #       # -- --verify
      #       # --exclude-region="kcov-ignore-start:kcov-ignore-end"
      #       # --exclude-pattern="$CARGO_HOME,**/tests/**"
      #       # --exclude-line="^(\)*\}*,*)$"
      #     environment:
      #       # Configure the redis tests to use a unix socket instead of TCP
      #       REDISRS_SERVER_TYPE: unix
      # - run:
      #     name: Upload Code Coverage
      #     command: "bash <(curl -s https://codecov.io/bash)"
      - save_cache:
          key: cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
          paths:
            - /home/circleci/.cargo
  test-md:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
            - cargo-cache-2-{{ checksum "Cargo.lock" }}
            - cargo-cache-2-
      - run:
          name: Set Default Target musl
          command: |
            mkdir -p .cargo
            printf "[build]\ntarget = \"x86_64-unknown-linux-musl\"\n" > .cargo/config
      - run:
          name: Build
          command: cargo build --bin interledger --bin interledger-settlement-engines --all-features
      - run:
          # builds dev profile images because these images are not going to be released
          # also, we have to copy binaries so remove target from .dockerignore
          name: Build docker images
          command: |
            dockerignore=$(cat .dockerignore | sed /^target/d)
            echo "$dockerignore" > .dockerignore
            echo "target/**/*.d" >> .dockerignore
            echo "target/**/*.rlib" >> .dockerignore
            echo "target/**/deps" >> .dockerignore
            echo "target/**/incremental" >> .dockerignore
            scripts/docker-build.sh ci-node ci-settlement-engines
      - run:
          name: Run run-md test
          command: scripts/run-md-test.sh
      - store_artifacts:
          path: /tmp/run-md-test
          destination: run-md-test
      - save_cache:
          key: cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
          paths:
            - /home/circleci/.cargo
  update-docker-images:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
            - cargo-cache-2-{{ checksum "Cargo.lock" }}
            - cargo-cache-2-
      - run:
          # builds release profile images to be released
          name: Build docker images
          command: scripts/docker-build.sh node settlement-engines
          environment:
            PROFILE: "release"
      - run:
          name: Push to DockerHub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push interledgerrs/node:latest
            docker push interledgerrs/settlement-engines:latest
      - save_cache:
          key: cargo-cache-2-{{ checksum "Cargo.lock" }}-{{ .Branch }}
          paths:
            - /home/circleci/.cargo

workflows:
  version: 2
  build_and_test-md:
    jobs:
      - build
      - test-md
      - update-docker-images: # updates docker images on DockerHub, only if the branch is master
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - test-md
